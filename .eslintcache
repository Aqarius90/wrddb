[{"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\App.js":"1","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\Firestore.js":"2","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\DatabaseHandlers.js":"3","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\reportWebVitals.js":"4","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\Header.jsx":"5","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\WRD.jsx":"6","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\index.js":"7","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\DeckBuilder.jsx":"8","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckSelector.jsx":"9","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\Deck.js":"10","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\binparsers.js":"11","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\DecodeHeader.jsx":"12","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\CDRow.jsx":"13","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\GUIparsers.js":"14","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitPanel.jsx":"15","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitDisplay.jsx":"16","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitHeader.jsx":"17","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\flags.js":"18","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitModules.jsx":"19","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\Database\\Database.jsx":"20","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\Database\\WeaponDB.jsx":"21","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\Database\\UnitDB.jsx":"22"},{"size":2294,"mtime":1607463190473,"results":"23","hashOfConfig":"24"},{"size":771,"mtime":1607246118469,"results":"25","hashOfConfig":"24"},{"size":12829,"mtime":1607461949598,"results":"26","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"24"},{"size":5916,"mtime":1607460457261,"results":"28","hashOfConfig":"24"},{"size":4082,"mtime":1607460297291,"results":"29","hashOfConfig":"24"},{"size":543,"mtime":1607447087315,"results":"30","hashOfConfig":"24"},{"size":5625,"mtime":1607246923869,"results":"31","hashOfConfig":"24"},{"size":6420,"mtime":1607455540847,"results":"32","hashOfConfig":"24"},{"size":11423,"mtime":1607463177939,"results":"33","hashOfConfig":"24"},{"size":10192,"mtime":1607207262439,"results":"34","hashOfConfig":"24"},{"size":1883,"mtime":1607246513140,"results":"35","hashOfConfig":"24"},{"size":3405,"mtime":1607447984141,"results":"36","hashOfConfig":"24"},{"size":1470,"mtime":1607207457329,"results":"37","hashOfConfig":"24"},{"size":4166,"mtime":1607465136056,"results":"38","hashOfConfig":"24"},{"size":1184,"mtime":1607450786840,"results":"39","hashOfConfig":"24"},{"size":1396,"mtime":1607451864245,"results":"40","hashOfConfig":"24"},{"size":1952,"mtime":1606761749194,"results":"41","hashOfConfig":"24"},{"size":8781,"mtime":1607455191372,"results":"42","hashOfConfig":"24"},{"size":2662,"mtime":1607193344733,"results":"43","hashOfConfig":"24"},{"size":3939,"mtime":1607198244209,"results":"44","hashOfConfig":"24"},{"size":3956,"mtime":1607197846529,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"nu2oxy",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"51"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"51"},"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\App.js",[],["103","104"],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\Firestore.js",[],["105","106"],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\DatabaseHandlers.js",["107","108","109"],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\reportWebVitals.js",[],["110","111"],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\Header.jsx",["112"],"import React, {useState} from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport flags from \"./js/flags\";\r\n\r\nfunction Header({DB, API}) {\r\n  let params = useParams();\r\n  let history = useHistory();\r\n  const [showUploadPanel, setUploadPanel] = useState(false);\r\n  const [parsed, setParsed] = useState(null);\r\n\r\n  function loadFile() {\r\n    const fileSelector = document.createElement(\"input\");\r\n    fileSelector.setAttribute(\"type\", \"file\");\r\n    fileSelector.onchange = handleFileSelect;\r\n    fileSelector.setAttribute(\"multiple\", \"multiple\");\r\n    fileSelector.click();\r\n  }\r\n  function handleFileSelect(evt) {\r\n    let replayFile = evt.target.files[0];\r\n    let reader = new FileReader();\r\n    reader.onload = () => {\r\n      let enc = new TextDecoder(\"utf-8\");\r\n      let blob = reader.result;\r\n      let data = enc.decode(blob);\r\n      data = parseReplay(data, DB);\r\n      //setParsed({ meta: data, blob: blob });\r\n      setParsed(data);\r\n      setUploadPanel(true);\r\n    };\r\n    reader.readAsArrayBuffer(replayFile);\r\n  }\r\n  function parseReplay(x, DB) {\r\n    let HeaderStart = x.indexOf('\"game\"');\r\n    let HeaderEnd = x.indexOf(\"}star\");\r\n    let header = x.slice(HeaderStart, HeaderEnd);\r\n    header = JSON.parse(\"{\" + header + \"}\"); //to valid JSON\r\n\r\n    let headerArr = []; //[game, ...player]\r\n    global.log(\"header\", header)\r\n    for (var key in header) {\r\n      if (header.hasOwnProperty(key)) {\r\n        headerArr.push(header[key]);\r\n      }\r\n    }\r\n    let Game = [];\r\n    let Players = [];\r\n    for (let i = 0; i < headerArr.length; i++) {\r\n      if (i === 0) {\r\n        Game = headerArr[i];\r\n      } else {\r\n        if (headerArr[i].PlayerDeckContent) {\r\n          Players.push(headerArr[i]);\r\n        }\r\n      }\r\n    }\r\n    return { h: Game, p: Players};\r\n  }\r\n\r\n  let setDeck=(x)=>{\r\n    API.decode(x.PlayerDeckContent);\r\n    setUploadPanel(false);\r\n  }\r\n\r\n  let makePlayer = (x, i)=>{\r\n    return (\r\n      <div className=\"row\" key={i}>\r\n        <div className=\"col-2\">\r\n          {x.PlayerName}\r\n        </div>\r\n        <div className=\"col\">\r\n          {x.PlayerDeckName}\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <img\r\n            className=\"table-flag\"\r\n            src={parseNation(x.PlayerDeckContent)}\r\n            alt=\"flag\"\r\n          />\r\n        </div>\r\n        <div className=\"col-3\">\r\n          <button className=\"btn btn-primary btn-block\" onClick={()=>setDeck(x)}>Decode</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-xl-2 col-md-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 col-6\">\r\n            <button\r\n              className=\"btn btn-primary btn-block\"\r\n              onClick={() =>\r\n                history.push(\r\n                    \"/DeckBuilder\" +\r\n                    (params.code ? \"/\" + params.code : \"\")\r\n                )\r\n              }\r\n              disabled={params.Page !== \"DeckBuilder\" ? false : true}\r\n            >\r\n              DeckBuilder\r\n            </button>\r\n          </div>\r\n          <div className=\"col-md-12 col-6\">\r\n            <button\r\n            className=\"btn btn-primary btn-block\"\r\n            onClick={() =>\r\n              history.push(\r\n                  \"/Database\" +\r\n                  (params.code ? \"/\" + params.code : \"\")\r\n              )\r\n            }\r\n            disabled={params.Page !== \"Database\" ? false : true}\r\n          >\r\n            Database\r\n          </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-xl-8 col-md-6 panel\">\r\n        <h1 align=\"center\">\r\n          Wargame Red Dragon Database\r\n        </h1>\r\n      </div>\r\n      <div className=\"col-xl-2 col-md-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 col-6\">\r\n            <button className=\"btn btn-primary btn-block\" onClick={()=>loadFile()}>Parse replay</button>\r\n          </div>\r\n          <div className=\"col-md-12 col-6\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={showUploadPanel?\"col-12\":\"d-none\"}>\r\n        {parsed && \r\n        <>\r\n        <div className=\"row\">\r\n          <div className=\"col\">{parsed.h.Map}</div>\r\n          <div className=\"col\">Starting income:{parsed.h.InitMoney}</div>\r\n          <div className=\"col\">Time limit:{parsed.h.TimeLimit}</div>\r\n          <div className=\"col\">Score limit:{parsed.h.ScoreLimit}</div>\r\n          <div className=\"col\">Income:{parsed.h.IncomeRate}</div>\r\n        </div>\r\n        {parsed.p.map((e, i)=>makePlayer(e, i))}\r\n        </>\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction parseNation(code){\r\n  switch (code.slice(0,3)) {    \r\n    case \"@AM\": return flags.USA;\r\n    case \"@As\": return flags.UK;\r\n    case \"@BM\": return flags.FRA;\r\n    case \"@Bs\": return flags.BRD;\r\n    case \"@CM\": return flags.CAN;\r\n    case \"@Cs\": return flags.DEN;\r\n    case \"@DM\": return flags.SWE;\r\n    case \"@Ds\": return flags.NOR;\r\n    case \"@EM\": return flags.ANZAC;\r\n    case \"@Es\": return flags.JAP;\r\n    case \"@FM\": return flags.ROK;\r\n    case \"@Fs\": return flags.NED;\r\n    case \"@GM\": return flags.ISR;\r\n    case \"@Hg\": return flags.EU;\r\n    case \"@Hh\": return flags.SCA;\r\n    case \"@Hi\": return flags.COM;\r\n    case \"@Hj\": return flags.BD;\r\n    case \"@Hm\": return flags.LJ;\r\n    case \"@Ho\": return flags.NORAD;\r\n    case \"@Hp\": return flags.BRDNL;\r\n    case \"@Hs\": return flags.NATO;\r\n    case \"@QM\": return flags.DDR;\r\n    case \"@Qs\": return flags.USSR;\r\n    case \"@RM\": return flags.POL;\r\n    case \"@Rs\": return flags.CZS;\r\n    case \"@SM\": return flags.PRC;\r\n    case \"@Ss\": return flags.DPRK;\r\n    case \"@TM\": return flags.FIN;\r\n    case \"@Ts\": return flags.YU;\r\n    case \"@Uk\": return flags.RD;\r\n    case \"@Ul\": return flags.NSWP;\r\n    case \"@Uq\": return flags.FINPL;\r\n    case \"@Ur\": return flags.YUCZE;\r\n    case \"@Us\": return flags.REDFOR;\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\WRD.jsx",["113"],"import React, { useState,useEffect } from \"react\";\r\nimport DeckAssembly from \"../js/Deck\";\r\nimport DecodeHeader from \"./DeckBuilder/DecodeHeader\";\r\nimport DeckBuilder from \"./DeckBuilder/DeckBuilder\";\r\nimport DeckSelector from  \"./DeckSelector\";\r\nimport Database from \"./Database/Database\";\r\nimport _ from \"lodash\";\r\nimport { useParams, Redirect } from \"react-router-dom\"; \r\nimport Header from \"../Header\";\r\n\r\nfunction WRD({ Honey, API }) {\r\n\r\n  let DB =  _.cloneDeep(Honey.DB); //honey DB is single units for DB, plain DB is loaded, for builder\r\n                                //this will come back to bite me.\r\n  DB.units.forEach(u=>{ //load transports into unit card\r\n      u.Transporters = u.Transporters.map(e=>DB.units.find(ek=> ek.ID === e));\r\n    }\r\n  );\r\n  let deckAPI = {}; //function holder. I don't have the energy to rewrite it into a reducer\r\n  let params = useParams();\r\n  deckAPI.setCode = API.setCode;\r\n  //deck setters\r\n  const [deck, setDeck] = useState(new DeckAssembly(DB));\r\n  deckAPI.decode = code => {\r\n    //set deck via deck code\r\n    try {\r\n      let newdeck = new DeckAssembly(DB);\r\n      setDeck(newdeck.loadFromCode(code, DB));\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"deck decode error\", 0, error);\r\n    }\r\n  };\r\n  deckAPI.clear = () => {\r\n    //set deck to empty\r\n    let newdeck = new DeckAssembly(DB);\r\n    setDeck(newdeck);\r\n    deckAPI.setCode(newdeck.DeckCode);\r\n  };\r\n  deckAPI.setDeck = x => {\r\n    try {\r\n      let newdeck =  _.clone(deck);\r\n      setDeck(newdeck.loadFromDB(x, DB));\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"deck set error\", 0, error);\r\n    }\r\n  };\r\n  deckAPI.randomFill = () => {\r\n    try {\r\n      let newdeck =  _.clone(deck).randomFill();\r\n      setDeck(newdeck);\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"random fill error\", 0, error);\r\n    }\r\n  };\r\n  deckAPI.fullRandomFill = () => {\r\n    try {\r\n      let newdeck = new DeckAssembly(DB).fullRandomFill();\r\n      setDeck(newdeck);\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"full random fill error\", 0, error);\r\n    }\r\n  };\r\n  deckAPI.setSpec = x => {\r\n    try {\r\n      let newdeck = _.clone(deck).setSpec(x);\r\n      setDeck(newdeck);\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"income set error\", 0, error);\r\n    }\r\n  };\r\n  deckAPI.setEra = x => {\r\n    try {\r\n      let newdeck = _.clone(deck).setEra(x);\r\n      setDeck(newdeck);\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"income set error\", 0, error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (params.code) {\r\n      deckAPI.decode(params.code);\r\n    }\r\n  }, []);\r\n\r\n  deckAPI.addUnit =( vet, unit, transport, boat)=> {\r\n    try {\r\n      let newdeck = _.clone(deck).addUnit( vet, unit, transport, boat);\r\n      setDeck(newdeck);\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"addUnit error\", 0, error);\r\n    }\r\n  };\r\n  deckAPI.deleteUnit = x => {\r\n    try {\r\n      let newdeck = _.clone(deck).deleteUnit(x);\r\n      setDeck(newdeck);\r\n      deckAPI.setCode(newdeck.DeckCode);\r\n    } catch (error) {\r\n      global.throw(\"deleteUnit error\", 0, error);\r\n    }\r\n  };    \r\n  switch (params.Page) {\r\n    case \"DeckBuilder\":     \r\n        return (\r\n            <>\r\n                <div className=\"card\">\r\n                  <Header  DB={DB} API={deckAPI}/>\r\n                </div>\r\n                <DeckSelector DB={DB} Deck={deck} API={deckAPI}/>\r\n                <DecodeHeader Deck={deck} API ={ deckAPI}/>\r\n                <DeckBuilder DB={DB} Deck={deck} API={deckAPI} />\r\n            </>\r\n        );\r\n    case \"Database\":\r\n        return (\r\n          <>\r\n            <div className=\"card\">\r\n              <Header  DB={DB} decode={deckAPI.decode}/>\r\n            </div>\r\n            <Database DB={Honey.DB}/>\r\n          </>\r\n        );\r\n    default:\r\n        <Redirect to=\"/DeckBuilder\" />\r\n    }\r\n}\r\nexport default WRD;\r\n","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\index.js",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\DeckBuilder.jsx",["114"],"import React, { useState } from \"react\";\r\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport CDRow from \"./CDRow\";\r\nimport UnitPanel from \"./UnitPanel\";\r\n//import Randomizer from \"./Randomizer\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction DeckBuilder({ DB, Deck, API }) {\r\n  //the unit to show in right hand side\r\n  const [sideShow, setSideShow] = useState(null);\r\n  return (\r\n    <div className=\"card\">\r\n      <Tabs className=\"card\" defaultIndex={0}>\r\n        <TabList>\r\n          <Tab>Deck</Tab>\r\n          <Tab>Logistics{Deck.Spec.bonus.LOG? (\"+\"+Deck.Spec.bonus.LOG):\"\"}</Tab>\r\n          <Tab>Infantry{Deck.Spec.bonus.INF?(\"+\"+Deck.Spec.bonus.INF):\"\"}</Tab>\r\n          <Tab>Support{Deck.Spec.bonus.SUP?(\"+\"+Deck.Spec.bonus.SUP):\"\"}</Tab>\r\n          <Tab>Tanks{Deck.Spec.bonus.TNK?(\"+\"+Deck.Spec.bonus.TNK):\"\"}</Tab>\r\n          <Tab>Recon{Deck.Spec.bonus.REC?(\"+\"+Deck.Spec.bonus.REC):\"\"}</Tab>\r\n          <Tab>Vehicles{Deck.Spec.bonus.VHC?(\"+\"+Deck.Spec.bonus.VHC):\"\"}</Tab>\r\n          <Tab>Helicopters{Deck.Spec.bonus.HEL?(\"+\"+Deck.Spec.bonus.HEL):\"\"}</Tab>\r\n          <Tab>Planes{Deck.Spec.bonus.PLA?(\"+\"+Deck.Spec.bonus.PLA):\"\"}</Tab>\r\n          <Tab>Naval{Deck.Spec.bonus.NAV?(\"+\"+Deck.Spec.bonus.NAV):\"\"}</Tab>\r\n          <Tab>Randomizer</Tab>\r\n        </TabList>\r\n\r\n        <TabPanel>\r\n          <div className=\"card-body\">\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.LOG} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.INF} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.SUP} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.TNK} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.REC} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.VHC} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.HEL} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.PLA} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.SHP} />\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"LOG\"}\r\n            Index={0} //*for CardRow\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"INF\"}\r\n            Index={1}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"SUP\"}\r\n            Index={2}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"TNK\"}\r\n            Index={3}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"REC\"}\r\n            Index={4}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"VHC\"}\r\n            Index={5}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"HEL\"}\r\n            Index={6}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"PLA\"}\r\n            Index={7}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <UnitPanel\r\n            Deck={Deck}\r\n            API={API}\r\n            tab={\"SHP\"}\r\n            Index={8}\r\n            sideShow={sideShow}\r\n            setShow={setSideShow}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel>\r\n          <div className=\"card-body\">\r\n            <div className=\"card-text row\">\r\n              <div className=\"col-2\">\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <button className=\"btn btn-primary btn-block\" onClick={()=>API.randomFill()}>\r\n                  Random fill\r\n                </button>\r\n              </div>\r\n              <div className=\"col-4\">\r\n                <button className=\"btn btn-primary btn-block\" onClick={()=>API.fullRandomFill()}>\r\n                  Full random fill\r\n                </button>\r\n              </div>\r\n              <div className=\"col-2\">\r\n              </div>\r\n            </div>\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.LOG} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.INF} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.SUP} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.TNK} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.REC} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.VHC} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.HEL} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.PLA} />\r\n            <CDRow Deck={Deck} Parsed={Deck.DisplayMatrix.SHP} />\r\n          </div>\r\n        </TabPanel>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\nexport default DeckBuilder;\r\n","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckSelector.jsx",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\Deck.js",["115","116","117","118","119","120","121"],"import { parseToBin, parseFromBin } from \"./binparsers\";\r\nimport _ from \"lodash\";\r\n\r\nclass DeckAssembly{\r\n    constructor(DB){\r\n        this.Deck = {code:0, Side :0, Nation:\"none\", nations:[]};\r\n        this.DB = DB;\r\n        this.Spec = DB.spec[7];\r\n        this.Era = DB.era[2];\r\n        this.baseDeckPoints = 45;    \r\n        this.fullUnits = [];//potential\r\n        this.Units = []; //available, units and transports (.IsTransporter)\r\n        this.Cards = []; //used\r\n        this.Pairs = {LOG:[],INF:[],SUP:[],TNK:[],REC:[],VHC:[],HEL:[],PLA:[],SHP:[]};\r\n    }\r\n\r\n    get DeckCode(){\r\n        let BinaryOut = \"0\";\r\n        BinaryOut += this.Deck.Side;\r\n        BinaryOut += this.Deck.code.toString(2).padStart(10, \"0\");\r\n        BinaryOut += this.Spec.code.toString(2).padStart(3, \"0\");\r\n        BinaryOut += this.Era.code.toString(2).padStart(2, \"0\");\r\n        let s3c = this.Cards.filter(e=>e.boat);\r\n        let s2c = this.Cards.filter(e=>e.transport);\r\n        let s1c = this.Cards.filter(e=>!e.transport);\r\n        BinaryOut += s3c.length.toString(2).padStart(4, \"0\");\r\n        BinaryOut += s2c.length.toString(2).padStart(5, \"0\");\r\n        s3c.forEach(e=>{\r\n            BinaryOut+=this.deNormalizeVet(e,e.vet, this.Spec).toString(2).padStart(3, \"0\");\r\n            BinaryOut+=e.unit.DeckID.toString(2).padStart(10, \"0\");\r\n            BinaryOut+=e.transport.DeckID.toString(2).padStart(11, \"0\");\r\n            BinaryOut+=e.boat.DeckID.toString(2).padStart(11, \"0\");\r\n        })\r\n        s2c.forEach(e=>{\r\n            BinaryOut+=this.deNormalizeVet(e,e.vet, this.Spec).toString(2).padStart(3, \"0\");\r\n            BinaryOut+=e.unit.DeckID.toString(2).padStart(11, \"0\");\r\n            BinaryOut+=e.transport.DeckID.toString(2).padStart(11, \"0\");\r\n        })\r\n        s1c.forEach(e=>{\r\n            BinaryOut+=this.deNormalizeVet(e,e.vet, this.Spec).toString(2).padStart(3, \"0\");\r\n            BinaryOut+=e.unit.DeckID.toString(2).padStart(11, \"0\");\r\n        })\r\n        global.log(\"BinaryOut\",BinaryOut);\r\n        return \"@\"+parseFromBin(BinaryOut);\r\n    }\r\n    CardsJagged(Cards){\r\n        let x = {LOG:[],INF:[],SUP:[],TNK:[],REC:[],VHC:[],HEL:[],PLA:[],SHP:[]};\r\n        try {\r\n            Cards.forEach(\r\n                e=>{\r\n                    if(e.boat || e.unit.Tab===\"SHP\" || (e.transport && e.transport.Tab === \"SHP\") ){\r\n                       x.SHP.push(e);\r\n                    } else {\r\n                        x[e.unit.Tab].push(e);\r\n                    }\r\n                }\r\n            )\r\n        } catch (error) {\r\n          global.throw(\"CardsJagged error\", this.Cards, error);\r\n        }\r\n        return x; //returns nested array of units, by category\r\n    }\r\n    get PointPair(){\r\n        let jagged =this.CardsJagged(this.Cards); \r\n        let used = 0;\r\n        let max = this.baseDeckPoints + this.Era.bonus + this.Deck.Points;\r\n        Object.keys(jagged).forEach(r =>\r\n            jagged[r].forEach((c, y) => (used += this.Spec.matrix[r][y]))\r\n        );\r\n        return {used:used, max:max};\r\n    }\r\n    get DisplayMatrix(){\r\n        let jagged =this.CardsJagged(this.Cards); \r\n        let x = {LOG:[],INF:[],SUP:[],TNK:[],REC:[],VHC:[],HEL:[],PLA:[],SHP:[]};\r\n        Object.keys(this.Spec.matrix).forEach(r =>{\r\n            jagged[r].forEach(e=> x[r].push(e));\r\n            for (let i = 0; i < 9; i++) {\r\n                if (x[r].length>i){//place taken, move on\r\n                }else { \r\n                    x[r][i] = this.Spec.matrix[r].length >i ? this.Spec.matrix[r][i] : \"X\";\r\n                }\r\n            }\r\n        })\r\n        return x;\r\n    }\r\n    filterUnits(){\r\n        this.Units = this.fullUnits;\r\n        if (!this.Spec.str === \"General\"){\r\n            this.Units = this.Units.filter(e=>{\r\n                return e.Decks.includes(this.Spec.str)\r\n            })\r\n        }\r\n        if (!this.Era.str === \"A\"){\r\n            this.Units = this.Units.filter(e=>this.Era.year > e.Year);\r\n        }\r\n        this.Pairs = {LOG:[],INF:[],SUP:[],TNK:[],REC:[],VHC:[],HEL:[],PLA:[],SHP:[]};\r\n        this.Units.filter(e=>!e.IsTransporter).forEach(unit=>{\r\n            if(!unit.Transporters[0]){ \r\n                this.Pairs[unit.Tab].push(new Card(0, unit));\r\n            } else if (unit.Transporters[0].ID === 18064|| unit.Transporters[0].ID === 18043){\r\n                this.Pairs[unit.Tab].push(new Card(0, unit));\r\n                this.Pairs[\"SHP\"].push(new Card(0, unit,unit.Transporters[0]));\r\n            } else {\r\n                unit.Transporters.forEach(tr=>{\r\n                    this.Pairs[unit.Tab].push(new Card(0, unit, tr));\r\n                    if(tr.Transporters[0]){\r\n                        this.Pairs[\"SHP\"].push(new Card(0, unit, tr, tr.Transporters[0]));\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    loadFromDB(Deck) {\r\n        //loads deck from DB, input is code\r\n        if (Deck === undefined) return;\r\n        this.Deck = Deck;\r\n        if (this.Deck.Nation === \"REDFOR\") {\r\n            this.fullUnits = this.DB.units.filter(e=>e.Nationalite).filter(e=>!e.IsPrototype);\r\n        } else if (this.Deck.Nation === \"NATO\") {\r\n            this.fullUnits = this.DB.units.filter(e=>!e.Nationalite).filter(e=>!e.IsPrototype);\r\n        } else {\r\n            this.fullUnits = this.DB.units.filter(e=>this.Deck.nations.includes(e.MotherCountry));\r\n        }\r\n        let ships = this.DB.units.filter(e=>(e.Tab===\"SHP\" && e.Nationalite===this.Deck.Side));\r\n        this.fullUnits = this.fullUnits.concat(ships);\r\n        this.filterUnits();\r\n        return this;\r\n    }\r\n    loadFromCode(code, DB){\r\n        let bin = parseToBin(code);\r\n        let posc = 0;\r\n        global.log(\"bin\",bin);\r\n        //side\r\n        let Side = parseInt(bin.slice(posc + 0, posc + 2), 2);\r\n        posc += 2;\r\n        let Nation = parseInt(bin.slice(posc + 0, posc + 10), 2);\r\n        posc += 10;\r\n\r\n        this.loadFromDB(DB.decks.find(e=>(e.code===Nation) && (e.Side ===Side)), DB);\r\n\r\n        this.Spec = DB.spec[parseInt(bin.slice(posc + 0, posc + 3), 2)];\r\n        posc += 3;\r\n        this.Era = DB.era[parseInt(bin.slice(posc + 0, posc + 2), 2)];\r\n        posc += 2;\r\n        let s3c = parseInt(bin.slice(posc + 0, posc + 4), 2);\r\n        posc += 4;\r\n        let s2c = parseInt(bin.slice(posc + 0, posc + 5), 2);\r\n        posc += 5;\r\n\r\n        let sideUnits  =DB.units.filter(e=>e.Nationalite === Side); //blame eugen\r\n        for (let i = 0; i < s3c; i++){\r\n            let vet = parseInt(bin.slice(posc + 0, posc + 3), 2);\r\n            posc += 3;\r\n            let unit = sideUnits.find(e => e.DeckID === parseInt(bin.slice(posc + 0, posc + 11), 2));\r\n            posc += 11;\r\n            let transport = sideUnits.find(e => e.DeckID === parseInt(bin.slice(posc + 0, posc + 11), 2));\r\n            posc += 11;\r\n            let boat = sideUnits.find(e => e.DeckID === parseInt(bin.slice(posc + 0, posc + 11), 2));\r\n            posc += 11;\r\n            this.Cards.push(new Card(this.normalizeVet(unit,vet, this.Spec), unit, transport, boat));\r\n        }\r\n\r\n        for (let i = 0; i < s2c; i++){\r\n            let vet = parseInt(bin.slice(posc + 0, posc + 3), 2);\r\n            posc += 3;\r\n            let unit = sideUnits.find(e => e.DeckID === parseInt(bin.slice(posc + 0, posc + 11), 2));\r\n            posc += 11;\r\n            let transport = sideUnits.find(e => e.DeckID === parseInt(bin.slice(posc + 0, posc + 11), 2));\r\n            posc += 11;\r\n            this.Cards.push(new Card(this.normalizeVet(unit,vet, this.Spec), unit, transport));\r\n        }\r\n        while (bin.length > (posc + 14)){\r\n            let vet = parseInt(bin.slice(posc + 0, posc + 3), 2);\r\n            posc += 3;\r\n            let unit = sideUnits.find(e => e.DeckID === parseInt(bin.slice(posc + 0, posc + 11), 2));\r\n            posc += 11;\r\n            this.Cards.push(new Card(this.normalizeVet(unit,vet, this.Spec), unit));\r\n        }\r\n        return this;\r\n    } \r\n    addUnit( vet, unit, transport, boat) {\r\n        this.Cards.push(new Card(vet, unit, transport, boat));\r\n        return this;\r\n    }\r\n    deleteUnit(Unit) {\r\n      this.Cards.splice(\r\n        this.Cards.findIndex(e => {\r\n          return Unit === e;\r\n        }),\r\n        1\r\n      );\r\n      return this;\r\n    }\r\n    normalizeVet(x, vet, spec){\r\n        let foo = spec.bonus[x.Tab] ? vet - spec.bonus[x.Tab] : vet\r\n        return foo>4? 4:(foo<0)?0:foo;\r\n    }\r\n    deNormalizeVet(x,vet,spec){\r\n        let foo = spec.bonus[x.unit.Tab] ? vet + spec.bonus[x.unit.Tab] : vet\r\n        return foo>4? 4:(foo<0)?0:foo;\r\n    }\r\n    setSpec(spec){\r\n        this.Spec = spec;\r\n        this.Units = this.fullUnits;\r\n        this.filterUnits();\r\n        return this;\r\n    }\r\n    setEra(era){\r\n        this.Era = era;\r\n        this.Units = this.fullUnits;\r\n        this.filterUnits();\r\n        return this;\r\n    }\r\n    unitCount(x){\r\n        return this.Cards.filter(e=>e.unit.ID === x.ID).length\r\n    }\r\n    transportCount(x){\r\n        return this.Cards.filter(e=>e.transport && e.transport.ID === x.ID).length;\r\n    }\r\n    cardIsValid(x){\r\n        let vunit = this.Units.some(e=>e.ID===x.unit.ID);\r\n        let uct = this.unitCount(x.unit) <= x.unit.MaxPacks;\r\n        let vtr = !x.transport ||this.Units.some(e=>e.ID===x.transport.ID) ;\r\n        let vct = !x.transport ||this.transportCount(x.transport) <= x.transport.MaxPacks;\r\n        return vunit && uct && vtr && vct;\r\n    }\r\n    randomFill(){\r\n        if(!this.Deck){return}\r\n        let gettableCards = _.clone(this.Pairs);\r\n        while (Object.keys(gettableCards).length > 0) {\r\n            let keys = Object.keys(gettableCards);\r\n            let tab = keys[ keys.length * Math.random() << 0];\r\n            gettableCards[tab]=gettableCards[tab].filter(e=>this.cardIsValid(e));\r\n            let card = gettableCards[tab][ gettableCards[tab].length* Math.random() << 0 ];\r\n            while(!card.unit.avail[card.vet]){\r\n                card.vet = Math.floor(Math.random() * (5));\r\n            }\r\n            this.Cards.push(card);\r\n            if (isNaN(this.PointPair.used)){\r\n                this.Cards.pop(card);\r\n                delete gettableCards[tab];\r\n            } else if ( this.PointPair.used > this.PointPair.max){\r\n                this.Cards.pop(card);\r\n                return this;\r\n            } else if (!this.cardIsValid(card)){\r\n                this.Cards.pop(card);\r\n                gettableCards[tab]=gettableCards[tab].filter(e=>e!=card);\r\n            }\r\n            //let unitIndex = Math.floor(Math.random() * packsArray.length);\r\n            //this.Pairs = {LOG:[],INF:[],SUP:[],TNK:[],REC:[],VHC:[],HEL:[],PLA:[],SHP:[]};\r\n\r\n        }\r\n    }\r\n    fullRandomFill(){\r\n        this.loadFromDB(this.DB.decks[this.DB.decks.length * Math.random() << 0]);\r\n        this.setSpec(this.DB.spec[ Math.floor(Math.random() * (8))]);\r\n        this.setEra(this.DB.era[ Math.floor(Math.random() * (3))]);\r\n        this.randomFill();\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Card {\r\n    constructor(vet, unit, transport, boat){\r\n        this.vet = vet;\r\n        this.unit = unit;\r\n        this.transport = transport;\r\n        this.boat = boat;\r\n        this.avail = [];\r\n        if(transport){\r\n           for (let i = 0; i < 5; i++) {\r\n               this.avail[i] = Math.min(unit.avail[i],transport.avail[i]);\r\n           }\r\n        } else {\r\n            this.avail = unit.avail;\r\n        }\r\n    }\r\n}\r\n\r\nexport default DeckAssembly;","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\binparsers.js",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\DecodeHeader.jsx",["122","123","124"],"import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction DecodeHeader({ Deck, API }) {  \r\n    /*lets you type into the input without polluting the Deck object with false data*/\r\n    const [code, setCode] = useState(\"\");\r\n    const [realCode, setRealCode] = useState(Deck.DeckCode);\r\n    if (realCode !== Deck.DeckCode) {\r\n      /*realCode is the actual deck code. code is just the shown one\r\n       *when deckcode disagrees with realcode, the deck was changed, everything syncs*/\r\n      setCode(Deck.DeckCode);\r\n      setRealCode(Deck.DeckCode);\r\n    }\r\n    \r\n    const [isFirst, setIsFirst] = useState(true);\r\n    //let params = useParams();\r\n    //if (isFirst && params.code) {\r\n    //  API.decode(params.code);\r\n    //  setIsFirst(false);\r\n    //}\r\n  \r\n    let handleChange = event => {\r\n      setCode(event.target.value);\r\n    };\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-8 col-md-8 order-md-1 order-sm-3\">\r\n                  <input\r\n                    className=\"form-control\"\r\n                    value={code}\r\n                    type=\"text\"\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div className=\"col-xl-2 col-md-2 order-md-2 col-sm-6 order-sm-1\">\r\n                  <button className=\"btn btn-block btn-outline-primary\" onClick={() => API.decode(code)}>\r\n                    Decode\r\n                  </button>\r\n                </div>\r\n                <div className=\"col-xl-2 col-md-2 order-md-3 col-sm-6  order-sm-2\">\r\n                  <button className=\"btn btn-block btn-outline-primary\" onClick={() => API.clear()}>\r\n                    Clear\r\n                  </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n export default DecodeHeader;  ","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\CDRow.jsx",["125"],"import React from \"react\";\r\nimport { getPortrait, VetIcon,NatIcon} from \"../../js/GUIparsers\";\r\nimport flags from \"../../js/flags\";\r\n\r\nfunction CDRow({ Deck, Parsed, show, API }) {\r\n  let showCard = (x, i) => {\r\n    let css = \"col-4 px-1 py-1 d-flex flex-column\";\r\n    try {\r\n      //if not an object (AKA, a card), return a number\r\n      if (x === \"X\") {\r\n        return (\r\n          <div className={css} key={i}>\r\n            <h3 className=\"text-center\" key={i}> {x} </h3>\r\n          </div>\r\n        );\r\n      }\r\n      if (x.unit) {\r\n        return (\r\n          <div className={css} key={i}>\r\n          <UnitIconDisplay\r\n              x={x}\r\n              d={Deck}\r\n              show={show}\r\n              API={API}\r\n              key={i}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n      return (\r\n        <div className={css} key={i}>\r\n          <h3 className=\"text-center\" key={i}> {x} </h3>\r\n        </div>\r\n      );\r\n    } catch (error) {\r\n      global.throw(\"non-unit in unit display\", x, error);\r\n    }\r\n  };\r\n  return(\r\n    <div className=\"card-text row no-gutters\">\r\n      <div className=\"col-lg-4 col-md-6 col-sm-12\">\r\n        <div className=\"row no-gutters\">\r\n          {showCard(Parsed[0])}\r\n          {showCard(Parsed[1])}\r\n          {showCard(Parsed[2])}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-4 col-md-6 col-sm-12\">\r\n        <div className=\"row no-gutters\">\r\n          {showCard(Parsed[3])}\r\n          {showCard(Parsed[4])}\r\n          {showCard(Parsed[5])}\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-4 col-md-6 col-sm-12\">\r\n        <div className=\"row no-gutters\">\r\n          {showCard(Parsed[6])}\r\n          {showCard(Parsed[7])}\r\n          {showCard(Parsed[8])}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  /*return (\r\n    <div className=\"card-text row\">{Parsed.map((e, i) => showCard(e, i))}</div>\r\n  );*/\r\n}\r\n\r\nfunction UnitIconDisplay({ x, d, show, API }) {\r\n  if (!show) {\r\n    //for non-interactive display, show is undefined\r\n    return unitIcon(x, d, show);\r\n  } else {\r\n    return (\r\n      <>\r\n        {unitIcon(x, d, show)}\r\n        <button className=\"btn btn-block btn-outline-secondary mt-auto\" onClick={() => API.deleteUnit(x)}>\r\n          Delete\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction unitIcon(x, d, show) {\r\n  let vBon = d.Spec.bonus[x.unit.Tab]?d.Spec.bonus[x.unit.Tab]:0;\r\n  let textColor = d.cardIsValid(x) ? \"text-dark txt-cdrow\" : \"text-danger txt-cdrow\";\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"position-relative\"  onClick={() => show(x)}>\r\n        {getPortrait(x.unit, \"img-responsive w-100\")}\r\n        <img src={flags[x.unit.MotherCountry]} className=\"nat-flag\" alt=\"flag\" />\r\n        <h5 className=\"txt-price font-weight-bold\">\r\n          {x.unit.Price + (x.transport ? x.transport.Price : 0) + (x.boat ? x.boat.Price : 0)  }\r\n        </h5>\r\n        <h5 className=\"txt-avail\">{x.avail[x.vet]}</h5>\r\n        <VetIcon vet={x.vet+vBon} css=\"xp-raise\" />\r\n      </div>\r\n      <p className={textColor}>\r\n        {x.unit.Name +\r\n          \" \" +\r\n          d.unitCount(x.unit) +\r\n          \"/\" +\r\n          x.unit.MaxPacks}\r\n      </p>\r\n      <p className={textColor}>\r\n        {x.transport\r\n          ? x.transport.Name + \" \" + d.transportCount(x.transport) + \"/\" + x.transport.MaxPacks\r\n          : \"  \"}\r\n      </p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CDRow;\r\n","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\GUIparsers.js",["126"],"import React from \"react\";\r\nimport v0 from \"../pics/ranks/0.png\"\r\nimport v1 from \"../pics/ranks/1.png\"\r\nimport v2 from \"../pics/ranks/2.png\"\r\nimport v3 from \"../pics/ranks/3.png\"\r\nimport v4 from \"../pics/ranks/4.png\"\r\nimport flags from \"./flags\";\r\n\r\nexport function getPortrait(x, css) {\r\n    if (css) {\r\n      return (\r\n        <img\r\n          src={\r\n            process.env.PUBLIC_URL +\r\n            \"/picsb/\" +\r\n            (x.Nationalite?1:0) + x.DeckID +\r\n            \".png\"\r\n          }\r\n          onError={\r\n            ()=>global.throw(\"getPortrait error\",x)\r\n          }\r\n          className={css}\r\n          alt=\"unitPortrait\"\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <img\r\n      src={\r\n        process.env.PUBLIC_URL +\r\n        \"/picsb/\" +\r\n        (x.Nationalite?1:0) + x.DeckID +\r\n        \".png\"\r\n      }\r\n        className=\"img-sd-back\"\r\n        alt=\"unitPortrait\"\r\n      />\r\n    );\r\n}\r\n\r\nexport function VetIcon({ vet, css }) {\r\n  switch (vet) {\r\n    case -2:\r\n    case -1:\r\n    case 0:\r\n      return <img className={css} src={v0} alt=\"-\" />;\r\n    case 1:\r\n      return <img className={css} src={v1} alt=\"*\" />;\r\n    case 2:\r\n      return <img className={css} src={v2} alt=\"^^\" />;\r\n    case 3:\r\n      return <img className={css} src={v3} alt=\"^*^\" />;\r\n    case 4:\r\n    case 5:\r\n    case 6:\r\n      return <img className={css} src={v4} alt=\"^**^\" />;\r\n    default:\r\n      global.throw(\"VetIcon in unit panel\", vet);\r\n      return <div />;\r\n  }\r\n}","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitPanel.jsx",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitDisplay.jsx",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitHeader.jsx",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\js\\flags.js",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\DeckBuilder\\UnitModules.jsx",["127","128","129"],"import React, {useState} from \"react\";\r\n//import { GunNoiseParser, TurretHeader } from \"./AuxModules\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport amphib from \"../../pics/icons/spec_amphibie.tgv.png\"\r\nimport proto from \"../../pics/icons/spec_commandement.tgv.png\"\r\nimport command from \"../../pics/icons/spec_radio.tgv.png\"\r\n\r\nfunction UnitModules({ x }) {\r\n  let makeWeapon = (x, i)=>{\r\n    //x.SalvoIsMainSalvo;\r\n    //x.Salves;\r\n    return(\r\n      <div  key={i}>\r\n        <div className=\"card\">\r\n          <div className=\"card-header\" onClick={()=>harmonica(i)}>\r\n            <div className=\"row\">\r\n              <ReactTooltip />\r\n              <div className=\"col-4\" data-tip={x.Type}>\r\n                <b>{x.Name}</b>\r\n              </div>\r\n              <div className=\"col-4\" data-tip=\"x salvos of y shots\">\r\n                {x.Caliber}, {x.NumberOfSalvos} x {x.ShotsPerSalvo}\r\n              </div>\r\n              <div className=\"col-4\">\r\n                AP:{x.AP?x.AP:\"0\"}/HE:{x.HE?x.HE:\"0\"}\r\n              </div>\r\n              <div className=\"col-4\" data-tip={ x.HitProbability?\"Static/moving\" :\"at min range/at max range\" }>\r\n                {\r\n                  x.HitProbability?\r\n                  (\"Acc:\" + x.HitProbability*100+\"/\"+x.HitProbabilityWhileMoving*100):\r\n                  (\"Area:\" + x.DispersionAtMinRange+\"/\"+x.DispersionAtMaxRange)\r\n                }\r\n              </div>\r\n              <div className=\"col-4\" data-tip=\"salvo/shot\">\r\n                Reload: {x.TimeBetweenSalvos}s, {x.TimeBetweenShots}s\r\n              </div>\r\n              <div className=\"col-4\">\r\n                Aim: {x.AimTime}s\r\n              </div>\r\n              <div className=\"col-4\" data-tip=\"ground/helo/air\">{\r\n                x.RangeGround?x.RangeGround:0}m/{\r\n                x.RangeHelicopters?x.RangeHelicopters:0}m/{\r\n                x.RangePlanes?x.RangePlanes:0}m\r\n              </div>\r\n              <div className=\"col-4\">\r\n                |{x.Tags}|\r\n              </div>\r\n              <div className=\"col-4\" data-tip=\"ground/helo/air\">Supply:{x.SupplyCost}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={show === i ? \"card-body\" : \"d-none\" }>\r\n            <ul>\r\n              <ReactTooltip />\r\n              <li>AngleDispersion: {+Math.round(x.AngleDispersion*1000)/1000}</li>\r\n              <li>CanSmoke: {x.CanSmoke/* //: true,*/}</li>\r\n              <li data-tip=\"ground/helo/air\">Range, min:{\r\n                x.RangeGroundMinimum?x.RangeGroundMinimum:0}/{\r\n                x.RangeHelicoptersMinimum?x.RangeHelicoptersMinimum:0}/{\r\n                x.RangePlanesMinimum?x.RangePlanesMinimum:0}\r\n              </li>\r\n              <li>CorrectedShotDispersionMultiplier: {x.CorrectedShotDispersionMultiplier/* //: null,*/}</li>\r\n              <li data-tip=\"physical/suppress\">Splash Damage: {x.RadiusSplashPhysicalDamage+\"/\"+x.RadiusSplashSuppressDamage}</li>\r\n              <li>FireTriggeringProbability: {x.FireTriggeringProbability/* //: null,*/}</li>\r\n              <li>Crit chance: {x.MinimalCritProbability}</li>\r\n              <li>MinimalHitProbability: {x.MinimalHitProbability/* 0.05,*/}</li>\r\n              <li>Noise: {x.Noise/* //: 250,*/}</li>\r\n              {\r\n                x.MissileMaxSpeed?\r\n                  <li data-tip=\"Max speed/Acceleration/correction interval\">\r\n                    Missile speed:{x.MissileMaxSpeed+\"/\"+x.MissileMaxAcceleration + \"/\"+x.MissileTimeBetweenCorrections}\r\n                  </li>:\"\"\r\n              }\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  const [show, setShow] = useState(-1);\r\n  const harmonica = (x)=>{\r\n    x === show ? setShow(-1) : setShow(x);\r\n  }\r\n  \r\n  if (x != null) {\r\n    return (\r\n      <React.Fragment>\r\n        <ReactTooltip />\r\n        <div className=\"card\">\r\n          <div className=\"card-header\" onClick={()=>harmonica(\"head\")}>\r\n            <div className=\"row\">\r\n              <div className=\"col-2\">\r\n                HP: {x.Strength}\r\n              </div>\r\n              <div className={x.Amphibious?\"col-1\":\"d-none\"} data-tip=\"Amphibious\">\r\n                <img src={amphib}></img>\r\n              </div>\r\n              <div className={x.IsCommandUnit?\"col-1\":\"d-none\"} data-tip=\"Command\">\r\n                <img src={command}></img>\r\n              </div>\r\n              <div className={x.IsPrototype?\"col-1\":\"d-none\"} data-tip=\"Prototype\">\r\n                <img src={proto}></img>\r\n              </div>\r\n              <div className=\"col-sm col-12\" data-tip=\"Front/side/back/top\">\r\n                {x.ArmorFront===\"FRAG\"?\"⊗\":x.ArmorFront}/\r\n                {x.ArmorSides===\"FRAG\"?\"⊗\":x.ArmorSides}/\r\n                {x.ArmorRear===\"FRAG\"?\"⊗\":x.ArmorRear}/\r\n                {x.ArmorTop===\"FRAG\"?\"⊗\":x.ArmorTop}\r\n              </div>\r\n              <div className=\"col-sm-6 col-12\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-2 p-0\"><span className={\"badge \" + x.Decks.includes(\"Motorized\")?\"badge-success\":\"badge-secondary\"}>Mot</span></div>\r\n                  <div className=\"col-2 p-0\"><span className={\"badge \" + x.Decks.includes(\"Armored\")?\"badge-success\":\"badge-secondary\"}>Arm</span></div>\r\n                  <div className=\"col-2 p-0\"><span className={\"badge \" + x.Decks.includes(\"Support\")?\"badge-success\":\"badge-secondary\"}>Sup</span></div>\r\n                  <div className=\"col-2 p-0\"><span className={\"badge \" + x.Decks.includes(\"Marine\")?\"badge-success\":\"badge-secondary\"}>Mar</span></div>\r\n                  <div className=\"col-2 p-0\"><span className={\"badge \" + x.Decks.includes(\"Mechanized\")?\"badge-success\":\"badge-secondary\"}>Mec</span></div>\r\n                  <div className=\"col-2 p-0\"><span className={\"badge \" + x.Decks.includes(\"Airborne\")?\"badge-success\":\"badge-secondary\"}>Air</span></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <ReactTooltip />\r\n              <div className=\"col\" data-tip=\"Normal/Road\">\r\n                Speed:{x.MaxSpeed+ (x.MovementType===\"Wheeled\"?\"/150\":x.MovementType===\"Tracked\"?\"/110\":\"\")}\r\n              </div>\r\n              <div className=\"col\" data-tip=\"Ground/Air\">\r\n                Optics:{x.OpticalStrengthGround + \"/\"+ x.OpticalStrengthAir}\r\n              </div>\r\n              <div className=\"col\" data-tip=\"Size/Stealth\">\r\n                Bonuses:{x.SizeModifier+1 + \"/\"+ x.Stealth}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={show === \"head\" ? \"card-body\" : \"d-none\" }>\r\n            <ul>\r\n              <li>Size/ECM/Stealth: {x.SizeModifier+1+\"/\"+ x.ECM+\"/\"+x.Stealth}</li>\r\n              <li>Movement type: {x.MovementType}</li>\r\n              <li data-tip=\"Normal/Road/Acceleration/Deceleration\">Speeds: {\r\n                x.MaxSpeed+\"/\"+\r\n                (x.MovementType===\"Wheeled\"?\"150\":x.MovementType===\"Tracked\"?\"110\":x.MaxSpeed)+\r\n                \"/\"+x.MaxAcceleration+\"/\"+Math.round(x.MaxDeceleration*100)/100}\r\n              </li>\r\n              <li data-tip=\"Ground/Air/Radar/Range/Identify chance/dice roll interval\">\r\n                Optics:{x.OpticalStrengthGround + \"/\"+ x.OpticalStrengthAir + \"/\" +\r\n                 x.OpticalStrengthAntiradar+\"/\"+x.PorteeVision+\"/\"+\r\n                 x.IdentifyBaseProbability+\"/\"+Math.round(x.TimeBetweenEachIdentifyRoll*100)/100}\r\n                </li>\r\n              <li>Detection: {x.HelicopterDetectionRadius+\"/\"+x.AirToAirHelicopterDetectionRadius}</li>\r\n              <li data-tip=\"morale regen/suppression to stun/suppression ceiling/morale damage on transport kill\">\r\n                Stun/Suppression:{x.StunDamageRegen+\"/\"+x.StunDamageToGetStunned+\"/\"+x.SuppressionCeiling + \"/\" +\r\n                x.SuppressDamageRatioIfTransporterKilled +\"%\"}\r\n              </li>\r\n              {\r\n                x.AirplaneMinimalAltitude?\r\n                  <li data-tip=\"min/regular\">\r\n                    Altitude:{x.AirplaneMinimalAltitude+\"/\"+x.AirplaneFlyingAltitude}\r\n                  </li>:\"\"\r\n              }\r\n              {\r\n                x.HelicopterHoverAltitude?\r\n                  <li data-tip=\"min/regular/Takeoff speed\">\r\n                    Altitude:{x.HelicopterHoverAltitude+\"/\"+x.HelicopterFlyingAltitude + \"/\"+x.UpwardSpeed}\r\n                  </li>:\"\"\r\n              }\r\n              {x.FuelCapacity?<li>Fuel/autonomy:{x.FuelCapacity+\"/\"+x.Autonomy}</li>:\"\"}\r\n              {x.SupplyCapacity?<li>Supply/Priority:{x.SupplyCapacity+\"/\"+x.SupplyPriority}</li>:\"\"}\r\n              <li>Year: {x.Year}</li>\r\n            </ul>\r\n          </div>\r\n          {x.Weapons.map((e,i)=>makeWeapon(e, i))}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  return <div />;\r\n}\r\n\r\nexport default UnitModules;\r\n","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\Database\\Database.jsx",["130","131"],"import React, { useState } from \"react\";\r\nimport UnitDB from \"./UnitDB\";\r\nimport WeaponDB from \"./WeaponDB\";\r\n\r\n\r\nfunction Database({ DB }) {\r\n    const [thisDB, setThisDB] = useState(\"u\");\r\n    const [allUnits, setAllUnits] = useState(DB.units);\r\n    let guns = [];\r\n    DB.units.forEach( e=>e.Weapons.forEach(w=>guns.push(w)));\r\n    const [allWeapons, setAllWeapons] = useState(guns);\r\n  \r\n    function getDB() {\r\n      switch (thisDB) {\r\n        case \"u\":\r\n          if (allUnits) {\r\n            return <UnitDB allUnits={allUnits} />;\r\n          }\r\n          break;\r\n        case \"w\":\r\n          if (allWeapons) {\r\n            return <WeaponDB allWeapons={allWeapons} />;\r\n          }\r\n          break;\r\n        default:\r\n            return (\r\n              <div className=\"card\">\r\n                <div className=\"d-flex justify-content-center\">\r\n                  <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n        }\r\n    }  \r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"card\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <button className=\"btn btn-block btn-outline-dark\" onClick={() => setThisDB(\"u\")}>\r\n                Units\r\n              </button>\r\n            </div>\r\n            <div className=\"col\">\r\n              <button className=\"btn btn-block btn-outline-dark\" onClick={() => setThisDB(\"w\")}>\r\n                Weapons\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {getDB()}\r\n      </React.Fragment>\r\n    );\r\n    //<DeckSelector DB={DB} Deck={deck} API={{}}/>\r\n  }\r\n  \r\n  export function FilterField({ items, set }) {\r\n    const [str, setstr] = useState(\"\");\r\n    let handleChange = (event) => {\r\n      setstr(event.target.value);\r\n    };\r\n  \r\n    function searchObj(obj, query) {\r\n        return(query.split(\" \").every(e=>JSON.stringify(obj).toLowerCase().includes(e.toLowerCase())));\r\n    }\r\n  \r\n    let lookup = (str) => {\r\n      let u = [];\r\n      items.forEach((e) => {\r\n        if (searchObj(e, str)) {\r\n          u.push(e);\r\n        }\r\n      });\r\n      set(u);\r\n    };\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-10\">\r\n          <input className=\"form-control\" value={str} type=\"text\" onChange={handleChange} />\r\n        </div>\r\n        <div className=\"col-2\">\r\n          <button className=\"btn btn-block\" onClick={() => lookup(str)}>\r\n            Filter\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Database;\r\n  ","C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\Database\\WeaponDB.jsx",[],"C:\\Users\\Aqarius\\Documents\\Gitkraken\\wrddb\\src\\WRD\\Database\\UnitDB.jsx",["132"],"import React, { useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport { FilterField } from \"./Database\";\r\nimport {getPortrait, VetIcon } from \"../../js/GUIparsers\";\r\n\r\nfunction UnitDB({ allUnits }) {\r\n  const [fUnits, setfUnits] = useState(allUnits);\r\n\r\n  function showRow(x, i) {\r\n    return (\r\n      <tr key={i} onClick={() => setDetail(x)}>\r\n        <UnitRow x={x} i={i}></UnitRow>\r\n      </tr>\r\n    );\r\n  }\r\n  const [detail, setDetail] = useState(null);\r\n\r\n  /*pagination*/\r\n  let pPage = 10;\r\n  const [page, setPage] = useState(0);\r\n  const [pages, setPages] = useState(Math.ceil(allUnits.length / pPage));\r\n  function setFilter(x) {\r\n    setPages(Math.ceil(x.length / pPage));\r\n    setPage(0);\r\n    setfUnits(x);\r\n  }\r\n  let pageUnits = [];\r\n  for (\r\n    let i = page * pPage;\r\n    i < Math.min((page + 1) * pPage, fUnits.length);\r\n    i++\r\n  ) {\r\n    pageUnits.push(fUnits[i]);\r\n  }\r\n  let handlePageClick = data => {\r\n    setPage(data.selected);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <FilterField items={allUnits} set={setFilter}></FilterField>\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <table className=\"sortable table-hover table-bordered table-responsive text-center\">\r\n              <tbody>\r\n                <tr>\r\n                  <th> </th>\r\n                  <th> Unit </th>\r\n                  <th> Price </th>\r\n                  <th> ArmorFront </th>\r\n                  <th> ArmorSides </th>\r\n                  <th> ArmorRear </th>\r\n                  <th> ArmorTop </th>\r\n                  <th> Tab </th>\r\n                  <th> Optics </th>\r\n                  <th> Stealth </th>\r\n                  <th> Speed </th>\r\n                  <th> Stun/regen </th>\r\n                  <th> Supply/TOT </th>\r\n                </tr>\r\n                {pageUnits.map((e, i) => showRow(e, i))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <p>{JSON.stringify(detail)}</p>\r\n          </div>\r\n            {/*<UnitCard detail={detail} setDetail={setail} />*/}\r\n        </div>\r\n      </div>\r\n      <div className=\"card\">\r\n        <ReactPaginate\r\n          previousLabel={\"previous\"}\r\n          nextLabel={\"next\"}\r\n          breakLabel={\"...\"}\r\n          breakClassName={\"btn\"}\r\n          pageCount={pages}\r\n          marginPagesDisplayed={2}\r\n          pageRangeDisplayed={5}\r\n          onPageChange={handlePageClick}\r\n          containerClassName={\"pagination btn-group btn-block\"}\r\n          subContainerClassName={\"pages pagination\"}\r\n          pageClassName={\"btn\"}\r\n          previousClassName={\"btn\"}\r\n          nextClassName={\"btn\"}\r\n          activeClassName={\"btn active\"}\r\n          pageLinkClassName={\"btn btn-block btn-outline-primary \"}\r\n          previousLinkClassName={\"btn btn-block btn-outline-primary\"}\r\n          nextLinkClassName={\"btn btn-block btn-outline-primary\"}\r\n          activeLinkClassName={\"btn btn-block btn-outline-primary active\"}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nfunction UnitRow({ x, i }) {\r\n    try {\r\n      return (\r\n        <React.Fragment>\r\n          <td>{getPortrait(x, \"img-responsive\")}</td>\r\n          <td>{x.Name}</td>\r\n          <td>{x.Price}</td>\r\n          <td>{x.ArmorFront}</td>\r\n          <td>{x.ArmorSides}</td>\r\n          <td>{x.ArmorRear}</td>\r\n          <td>{x.ArmorTop}</td>\r\n          <td>{x.Tab}</td>\r\n          <td>{x.OpticalStrengthGround + \"/\"+ x.OpticalStrengthAir}</td>\r\n          <td>{x.Stealth}</td>\r\n          <td>{x.MaxSpeed + \"/\" + (x.MovementType===\"Wheeled\"?\"110\":x.MovementType===\"Tracked\"?\"150\":x.MaxSpeed)}</td>\r\n          <td>{x.StunDamageToGetStunned+\"/\" +x.StunDamageRegen}</td>\r\n          <td>{x.Autonomy}</td>\r\n        </React.Fragment>\r\n      );\r\n    } catch (error) {\r\n      global.throw(\"Unit DB invalid\", x, error);\r\n      return <React.Fragment></React.Fragment>;\r\n    }\r\n  }\r\n\r\n\r\nexport default UnitDB;",{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"133","replacedBy":"137"},{"ruleId":"135","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":1,"column":8,"nodeType":"141","messageId":"142","endLine":1,"endColumn":9},{"ruleId":"139","severity":1,"message":"143","line":4,"column":8,"nodeType":"141","messageId":"142","endLine":4,"endColumn":11},{"ruleId":"144","severity":1,"message":"145","line":116,"column":7,"nodeType":"146","messageId":"147","endLine":180,"endColumn":8},{"ruleId":"133","replacedBy":"148"},{"ruleId":"135","replacedBy":"149"},{"ruleId":"144","severity":1,"message":"145","line":154,"column":3,"nodeType":"146","messageId":"147","endLine":189,"endColumn":4},{"ruleId":"150","severity":1,"message":"151","line":90,"column":6,"nodeType":"152","endLine":90,"endColumn":8,"suggestions":"153"},{"ruleId":"139","severity":1,"message":"154","line":7,"column":10,"nodeType":"141","messageId":"142","endLine":7,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":154,"column":39,"nodeType":"157","messageId":"158","endLine":154,"endColumn":100},{"ruleId":"155","severity":1,"message":"156","line":156,"column":44,"nodeType":"157","messageId":"158","endLine":156,"endColumn":105},{"ruleId":"155","severity":1,"message":"156","line":158,"column":39,"nodeType":"157","messageId":"158","endLine":158,"endColumn":100},{"ruleId":"155","severity":1,"message":"156","line":166,"column":39,"nodeType":"157","messageId":"158","endLine":166,"endColumn":100},{"ruleId":"155","severity":1,"message":"156","line":168,"column":44,"nodeType":"157","messageId":"158","endLine":168,"endColumn":105},{"ruleId":"155","severity":1,"message":"156","line":175,"column":39,"nodeType":"157","messageId":"158","endLine":175,"endColumn":100},{"ruleId":"159","severity":1,"message":"160","line":247,"column":66,"nodeType":"161","messageId":"162","endLine":247,"endColumn":68},{"ruleId":"139","severity":1,"message":"154","line":2,"column":10,"nodeType":"141","messageId":"142","endLine":2,"endColumn":19},{"ruleId":"139","severity":1,"message":"163","line":15,"column":12,"nodeType":"141","messageId":"142","endLine":15,"endColumn":19},{"ruleId":"139","severity":1,"message":"164","line":15,"column":21,"nodeType":"141","messageId":"142","endLine":15,"endColumn":31},{"ruleId":"139","severity":1,"message":"165","line":2,"column":31,"nodeType":"141","messageId":"142","endLine":2,"endColumn":38},{"ruleId":"139","severity":1,"message":"166","line":7,"column":8,"nodeType":"141","messageId":"142","endLine":7,"endColumn":13},{"ruleId":"167","severity":1,"message":"168","line":96,"column":17,"nodeType":"169","endLine":96,"endColumn":35},{"ruleId":"167","severity":1,"message":"168","line":99,"column":17,"nodeType":"169","endLine":99,"endColumn":36},{"ruleId":"167","severity":1,"message":"168","line":102,"column":17,"nodeType":"169","endLine":102,"endColumn":34},{"ruleId":"139","severity":1,"message":"170","line":8,"column":22,"nodeType":"141","messageId":"142","endLine":8,"endColumn":33},{"ruleId":"139","severity":1,"message":"171","line":11,"column":24,"nodeType":"141","messageId":"142","endLine":11,"endColumn":37},{"ruleId":"139","severity":1,"message":"172","line":4,"column":22,"nodeType":"141","messageId":"142","endLine":4,"endColumn":29},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],["173"],["174"],"no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","'csv' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["173"],["174"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'deckAPI' and 'params.code'. Either include them or remove the dependency array.","ArrayExpression",["175"],"'useParams' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'posc', 'posc'.","ArrowFunctionExpression","unsafeRefs","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'isFirst' is assigned a value but never used.","'setIsFirst' is assigned a value but never used.","'NatIcon' is defined but never used.","'flags' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setAllUnits' is assigned a value but never used.","'setAllWeapons' is assigned a value but never used.","'VetIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},"Update the dependencies array to be: [deckAPI, params.code]",{"range":"178","text":"179"},[2786,2788],"[deckAPI, params.code]"]